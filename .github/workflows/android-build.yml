# 工作流的名称
name: Android CI Build

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 允许你从 GitHub 仓库的 Actions 标签页手动触发此工作流
  workflow_dispatch:

# 定义一系列要执行的任务（Jobs）
jobs:
  build:
    # 任务运行的虚拟环境，这里使用最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    # 任务的执行步骤
    steps:
      # 第一步：检出（下载）你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Java 环境（Android 开发需要）
      # 注意：请根据你的项目要求选择合适的 Java 版本，例如 11 或 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 第三步：授予 Gradle Wrapper 执行权限
      # 这是确保 gradlew 脚本可以被执行的标准步骤
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 第四步：执行 Gradle 构建命令来编译 Debug 版本的 APK
      # ./gradlew assembleDebug 是标准的编译调试版 APK 的命令
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # 第五步：上传编译好的 APK 文件作为产物（Artifact）
      # 这样你就可以在工作流运行结束后下载它
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk # 上传产物的名称
          path: app/build/outputs/apk/debug/app-debug.apk # APK 文件所在的路径